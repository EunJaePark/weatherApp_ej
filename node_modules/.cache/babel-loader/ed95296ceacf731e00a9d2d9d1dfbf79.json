{"remainingRequest":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/babel-loader/lib/index.js!/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/weatherApp_ej/src/views/City.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/src/views/City.vue","mtime":1588782395971},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["City.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div \n    class=\"city clear\"\n    :class=\"{'light': this.day, 'dark': this.night}\"\n  ><!-- @cityname = \"newCity\" v-bind=\"weatherBG\"-->\n    <div class=\"mainWeather\">\n      <h1 class=\"cityname\">{{ city.name }}</h1>\n      <span class=\"date\">Sunday 30 April</span>\n\n      <div v-if=\"weather\" class=\"clear\">\n        <h3>배경에 적용되어야 할 날씨id : ***** {{ weather[0].id }} *****</h3>\n        <div class=\"iconBox\">\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`\" />\n        </div>\n        <div class=\"textBox\">\n         <span class=\"temp\">{{ temp }}℃</span> <!--평균기온-->\n          <span v-for=\"item in weather\" class=\"weatherText\">{{ item.main }}.  </span> <!--날씨-->\n        </div>\n      </div>\n    </div><!--.mainWeather-->\n\n    <div class=\"weatherInfo\">\n      <div v-if=\"tempInfo\">\n        <span>{{ maxTemp }}℃<span>Heigh</span></span> <!--최고 기온-->\n        <span>{{ minTemp  }}℃<span>Low</span></span>  <!--최저 기온-->    \n        <span>{{ tempInfo.humidity }}%<span>Humidity</span></span> <!--습도-->     \n      </div>\n\n      <div v-if=\"wind\">\n        <span>{{ wind.speed }}m/s<span>Wind</span></span> <!--바람-->\n        <!-- <span>{{ windDeg }}풍({{ wind.deg }}) {{ wind.speed }}m/s<span>Wind</span></span> -->\n      </div>\n\n      <div v-if=\"sun\">\n        <span>{{ sunriseTime }}<span>Sunrise</span></span> <!--일출-->\n        <span>{{ sunsetTime }}<span>Sunset</span></span> <!--일몰-->\n      </div>\n    </div><!--.weatherInfo-->\n\n    <h2>Forecast</h2>\n    <div class=\"weather5dayInfo\">      \n      <ul>\n        <li v-for=\"item in date5days\">\n          <span>{{ `${new Date(item.dt * 1000).getMonth() + 1 < 10 ? `0${new Date(item.dt * 1000).getMonth() + 1}` : `${new Date(item.dt * 1000).getMonth() + 1}`}.${new Date(item.dt * 1000).getDate() < 10 ? `0${new Date(item.dt * 1000).getDate()}` : `${new Date(item.dt * 1000).getDate()}`}` }} </span>\n          <span>{{ `${new Date(item.dt * 1000).getHours()}:${new Date(item.dt * 1000).getMinutes()}0` }} </span>\n          <!-- <span>{{ item.weather[0].main }}</span> -->\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`\" />\n          <span>{{ Math.round(item.main.temp) }}℃</span>\n        </li>\n      </ul>\n    </div><!--.weather5dayInfo-->\n\n    \n    <!-- <div style=\"outline:2px solid gray;  padding:20px;\">\n      <p>날씨 전체 데이터</p>\n      {{ city }}\n    </div> -->\n  </div><!--.city-->\n</template>\n\n<script>\nimport { eventbus } from '../main'\nexport default {\n  data() {\n    return {\n      cityname: '',\n      // signal: false,\n      minus: 273.15,  // json데이터에서 temp는 Kelvin(절대온도)이므로 273.15를 빼주어야한다. // 켈빈은 절대온도(0을 기전으로 함)에 기반으로 하여 측정되는 온도이며, 'K' 심볼이 사용됩니다. 0K 은 -273.15 °C, 혹은 -459.67 °F 로 변환될 수 있습니다.\n      // weatherId: '',\n      day: false,\n      night: false\n    }\n  },\n  computed: {\n    // 각 데이터 선언.\n    city () {\n      console.log(this.$store.state.weatherData);\n      \n      return this.$store.state.weatherData\n    },\n    tempInfo() {\n      return this.$store.state.weatherData.main\n    },\n    weather() {\n      return this.$store.state.weatherData.weather\n    },\n    sun() {\n      return this.$store.state.weatherData.sys\n    },\n    wind() {\n      return this.$store.state.weatherData.wind\n    },\n\n    // 기온: 섭씨로 수정 + 소수점 반올림.\n    temp() {\n      return Math.round(this.tempInfo.temp - this.minus)  // 소수점 반올림.\n    },\n    maxTemp() {\n      return Math.round(this.tempInfo.temp_max - this.minus)\n    },\n    minTemp() {\n      return Math.round(this.tempInfo.temp_min - this.minus)\n    },\n\n    // 날씨에 따른 배경 체인지.\n    // weatherBG() {  \n    //   localStorage.setItem('weatherID', this.weather[0].id) \n    //   let id = this.weather[0].id\n    //   console.log(id);\n      \n    //   if(id < 300) {\n    //     console.log('Thunderstorm')    \n    //     localStorage.setItem('weather', 'thunderstorm')     \n    //     let bg = document.querySelector('.city').classList.add('thunderstorm')   \n    //   } else if(id < 400) {\n    //     console.log('Drizzle')   \n    //     localStorage.setItem('weather', 'drizzle')  \n    //     let bg = document.querySelector('.city').classList.add('drizzle') \n    //   } else if(id < 600) {\n    //     console.log('이건Rain')   \n    //     localStorage.setItem('weather', 'rain')        \n    //     let bg = document.querySelector('.city').classList.add('rain')           \n    //   } else if(id < 700) {\n    //     console.log('Snow')  \n    //     localStorage.setItem('weather', 'snow')  \n    //     let bg = document.querySelector('.city').classList.add('snow')    \n    //   } else if(id < 800) {\n    //     console.log('Atmosphere')  \n    //     localStorage.setItem('weather', 'atmosphere')  \n    //     let bg = document.querySelector('.city').classList.add('atmosphere')         \n    //   } else if(id >= 801) {\n    //     console.log('Clouds')  \n    //     localStorage.setItem('weather', 'clouds')    \n    //     let bg = document.querySelector('.city').classList.add('clouds')     \n    //   } else if(id = 800) {\n    //     console.log('Clean') \n    //     localStorage.setItem('weather', 'clean')  \n    //     let bg = document.querySelector('.city').classList.add('clean')  \n    //   }\n    //   return this.weatherBg(id)       \n    // },\n\n\n    // weatherID() {\n    //   console.log('왜 weather의 length랑 [0]이랑 다 안되는거야....ㅠㅠ');\n      \n    //   console.log(this.weather)\n      \n    //   for(let i = 0; i < this.weather.length; i++) {\n    //     return this.weather[i].id\n    //   }\n    // },\n    // 날씨에 따른 배경 체인지.\n    weatherBG() {  \n      localStorage.setItem('weatherID', this.weatherID) \n      this.weatherId = this.weatherID\n      console.log(`this.weatherId: ${this.weatherId}`);\n      \n      return this.weatherBg(this.weatherId)     \n    },\n\n    //일출,일몰시간: 유닉스 시간을 표준시간으로 변경.\n    sunriseTime() {\n      // unix시간 변환.\n      const sunrise = this.sun.sunrise\n      localStorage.setItem('sunrise', sunrise)\n      console.log(`일출시간 : ${sunrise}`);\n      const sunrisetime = new Date(sunrise * 1000)\n      const sunriseTimestr = `${(sunrisetime.getHours() % 12) < 10 ? `0${sunrisetime.getHours() % 12}` : `${sunrisetime.getHours() % 12}`}:${sunrisetime.getMinutes() < 10 ? `0${sunrisetime.getMinutes()}` : `${sunrisetime.getMinutes()}`}`\n      return sunriseTimestr;\n    },\n    sunsetTime() {\n      // unix시간 변환.\n      const sunset = this.sun.sunset\n      localStorage.setItem('sunset', sunset)\n      console.log(`일몰시간 : ${sunset}`);\n      const sunsettime = new Date(sunset * 1000)\n      const sunsetTimestr = `${(sunsettime.getHours() % 12) < 10 ? `0${sunsettime.getHours() % 12}` : `${sunsettime.getHours() % 12}`}:${sunsettime.getMinutes() < 10 ? `0${sunsettime.getMinutes()}` : `${sunsettime.getMinutes()}`}`\n      return sunsetTimestr;\n    },\n\n    // 일출, 일몰 시간에 따른 배경 밝기 조절.\n    sunBG() {\n      const riseTime = this.sun.sunrise\n      const setTime = this.sun.sunset\n      console.log(riseTime, setTime, '아 왜 안되냐***********');\n      \n      sunbg(riseTime, setTime)\n      \n      return sunbe(riseTime, setTime)\n    },\n\n    // // 풍향: 방위 각도를 한글로 수정.\n    // windDeg() {\n    //   let cardinalPoints = null\n    //   if(0 <= this.wind.deg < 11.25 || 348.75 <= this.wind.deg < 360) { cardinalPoints = '북' }\n    //   else if(11.25 <= this.wind.deg < 78.75)  { cardinalPoints = '북동' }\n    //   else if(78.75 <= this.wind.deg < 123.75)  { cardinalPoints = '동' }\n    //   else if(123.75 <= this.wind.deg < 146.25)  { cardinalPoints = '남동' }\n    //   else if(146.25 <= this.wind.deg < 191.25)  { cardinalPoints = '남' }\n    //   else if(191.25 <= this.wind.deg < 236.25)  { cardinalPoints = '남서' }\n    //   else if(236.25 <= this.wind.deg < 281.25)  { cardinalPoints = '서' }\n    //   else if(281.25 <= this.wind.deg < 348.75)  { cardinalPoints = '북서' }\n\n    //   return cardinalPoints\n    // },\n\n    // 5days 시간별 날씨 전체 데이터.\n    weather5days() {\n      return this.$store.state.weather5daysData\n    },\n    // 5days 날짜 + 기온 + icon(id).\n    date5days() {\n      return this.weather5days.list\n    }\n\n  },\n  created() {  \n    // 페이지에 새롭게 접속할 경우, 이전에 입력해놓았던 나라가 보이도록 로컬스토리지에서 나라이름 가져옴.\n    const localstorageCityName = localStorage.getItem('city_name')\n    this.newCity(localstorageCityName)\n\n    // 페이지 새로고침시 weather에 따른 배경색 주기위함.\n    // const weatherID = localStorage.getItem('weatherID')\n    // console.log(weatherID)\n    // this.weatherBg(weatherID)\n\n    // 페이지 새로고침시 일출, 일몰에 따른 배경 밝기 조절.\n    const sunriseTime = localStorage.getItem('sunrise')\n    const sunsetTime = localStorage.getItem('sunset')\n    console.log(sunriseTime, sunsetTime);\n    \n    this.sunbg(sunriseTime, sunsetTime)\n\n    \n\n    // SearchCity.vue에서 input에 입력한 나라이름 가져와서 새롭게 나라날씨 데이터 가져옴.\n    // eventbus.$on('sendCityName', (cityInput, signal) => {\n    eventbus.$on('sendCityName', (cityInput) => {\n      console.log(cityInput)\n      // console.log(signal);     \n\n      // 나라 이름이 맞을 경우 날씨데이터 보여주고, 이름 틀릴경우 알림창 뜨도록하기.(아직 미완성) \n      // if(signal === true) {\n        // this.newCity(cityInput)\n      // }    \n\n      if(cityInput) {\n        this.newCity(cityInput)\n        let weatherid = null\n        console.log(weatherid);\n        console.log(this.$store.state.weatherData);\n        console.log(this.weatherBg);\n        \n        this.weatherBg(weatherid)\n      }\n      \n    }) \n    \n\n    \n        \n  },\n  methods: {\n    // api주소에 입력한 도시이름 넣어줌.(api의 index.js)\n    newCity(cityname) {\n      console.log('city name 받았어!!!!!!!!!');\n      this.$store.dispatch('FETCH_WEATHER', cityname)    \n      this.$store.dispatch('FETCH_5DAYS', cityname) \n    },\n\n    weatherBg(id) {\n      // const bg = this.weather[0].id\n      // console.log(bg);\n      // const entireBG = null\n      console.log(id); //console에 null로 뜨네...?\n      // id = this.weather[0].id\n      console.log(`이걸로 날씨id가 적용되는건데.....!화면에 뜬 숫자랑 같은가.....${id}`);\n      console.log(this);\n      \n      if(id < 300) {\n        console.log('Thunderstorm')    \n        localStorage.setItem('weather', 'thunderstorm')     \n        document.querySelector('.city').classList.add('thunderstorm')   \n      } else if(id < 400) {\n        console.log('Drizzle')   \n        localStorage.setItem('weather', 'drizzle')  \n        document.querySelector('.city').classList.add('drizzle') \n      } else if(id < 600) {\n        console.log('이건Rain')   \n        localStorage.setItem('weather', 'rain')        \n        document.querySelector('.city').classList.add('rain')           \n      } else if(id < 700) {\n        console.log('Snow')  \n        localStorage.setItem('weather', 'snow')  \n        document.querySelector('.city').classList.add('snow')    \n      } else if(id < 800) {\n        console.log('Atmosphere')  \n        localStorage.setItem('weather', 'atmosphere')  \n        document.querySelector('.city').classList.add('atmosphere')         \n      } else if(id >= 801) {\n        console.log('Clouds')  \n        localStorage.setItem('weather', 'clouds')    \n        document.querySelector('.city').classList.add('clouds')     \n      } else if(id = 800) {\n        console.log('Clean') \n        localStorage.setItem('weather', 'clean')  \n        document.querySelector('.city').classList.add('clean')  \n      }\n    },\n    sunbg(sunriseTime, sunsetTime) {\n      console.log('일출일몰시간 따라서 배경밝기 조절 함수 실행됨.');\n\n      const timeNow = new Date().getTime() / 1000\n      console.log(`현재시간 : ${timeNow} 일출:${sunriseTime} 일몰:${sunsetTime}`);\n      // console.log(`현재시간 : ${timeNow} 일출:${this.sun.sunrise} 일몰:${this.sun.sunset}`);\n\n\n      if(sunriseTime, sunsetTime) {\n        if(timeNow < sunriseTime ) {\n          console.log('동트기 전!!!!!!!!!!');\n        \n          this.day = false\n          this.night = true\n        }\n        if(sunriseTime < timeNow < sunsetTime && !(timeNow < sunriseTime)) {  // timeNow < sunriseTime가 계속 일출 후랑 겹쳐서 적용되서, 조건을 하나 더 줌.\n          console.log('해 뜸!!!!!!!!!');\n          this.night = false\n          this.day = true\n        } \n        if( sunsetTime <= timeNow) {\n          console.log('해 짐!!!!!!!!!!!');   \n          this.day = false\n          this.night = true\n        }\n\n        console.log(`day= ${this.day}`);\n        console.log(`night= ${this.night}`);\n      }\n    }\n  }\n}\n\n\n    //1. input이 입력되면 eventBus로 보낸 city명을 받아온뒤\n    //2. city명을 데이터에 저장해주고,\n    //3. 이 과정을 거친 후에 store로 시티명을 보내줘야함.\n    // 온도, 날씨정보, 도시명, 날짜 출력.\n</script>\n\n<style>\n.clear:after{ content:''; display:block; clear:both; }\n/* .light, .dark의 height를 넓이가 변할때마다 바꿔줘야함.!! */\n.light:after{ content:''; display:block; width:100vw; min-height:100vh; background-color:rgba(255, 255, 255, .5); position:absolute; top:0; left:0; }\n.dark:after{ content:''; display:block; width:100vw; min-height:100vh; background-color:rgba(0, 0, 0, .5); position:absolute; top:0; left:0; }\n.thunderstorm{ background-color:darkslategrey; }\n.drizzle{ background-color:yellowgreen; }\n.rain{ background-color:lightcyan; }\n.snow{ background-color:burlywood; }\n.atmosphere{ background-color:blue; }\n.clean{ background-color:skyblue; }\n.clouds{ background-color:darkgrey; }\n\n.city{ outline:0px solid orange; min-height:100vh; padding:250px 100px 40px; }\n\n.mainWeather{ outline:0px solid red; width:50%; float:left; }\n.mainWeather > .cityname{ outline:0px solid red; font-size:45px; font-weight:bold; }\n.mainWeather > .date{ margin:10px 0 50px; font-size:20px; display:block; }\n.mainWeather > div{  height:200px; }\n.mainWeather > div > .iconBox{ outline:0px solid lime; width:50%; padding-top:10px; float:left; }\n.mainWeather > div > .iconBox > img{ outline:0px solid lime; width:180px; margin:0 0 0 auto; display:block; }\n.mainWeather > div > .textBox{ outline:0px solid blue; width:50%; height:100%; padding:40px 0; float:left; }\n.mainWeather > div > .textBox > .temp{ outline:0px solid blue; font-size:70px;  }\n.mainWeather > div > .textBox > .weatherText{ outline:0px solid blueviolet; margin-left:10px; font-size:20px; display:block;  }\n\n.weatherInfo{ border-radius:10px;  width:calc(50% + -20px);  margin:100px 0 0 20px; background-color:rgba(255, 255, 255, .2); float:left; }\n.weatherInfo span{ width:33.3%; height:100px; padding:26px 0; font-size:20px; text-align:center; float:left; position:relative; } /* 날씨정보 */\n.weatherInfo span > span{  width:100%; height:auto; padding:0; font-size:15px; position:absolute; bottom:26px; left:0; }  /* 날씨정보 타이틀 */\n\n/* <div class=\"weather5dayInfo\">\n      <ul>\n        <li v-for=\"item in date5days\">\n          <span>{{ `${new Date(item.dt * 1000).getMonth() + 1}.${new Date(item.dt * 1000).getDate()}` }} </span>\n          <span>{{ `${new Date(item.dt * 1000).getHours()}:${new Date(item.dt * 1000).getMinutes()}0` }} </span>\n          <span>{{ Math.round(item.main.temp) }}</span>\n          <span>{{ item.weather[0].main }}</span>\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`\" />\n        </li>\n      </ul>\n    </div><!--.weather5dayInfo--> */\n\nh2{ width:100%; margin:30px 0 15px; font-weight:400; font-size:25px; text-align:left; display:inline-block; }\n.weather5dayInfo{  width:100%; overflow:scroll; }\n.weather5dayInfo > ul{width:4400px;  }\n.weather5dayInfo > ul:after{ content:''; display:block; clear:both; }\n.weather5dayInfo > ul > li{ border-radius:5px; width:90px; padding:10px; list-style:none; background-color:rgba(255, 255, 255, .2); float:left; }\n.weather5dayInfo > ul > li + li{ margin-left:20px; }\n\n.weather5dayInfo > ul > li > span{ text-align:center; display:block; }\n.weather5dayInfo > ul > li > img{ width:70%; margin:0 auto; display:block; }\n\n@media screen and (max-width: 900px) {\n  .city{ padding:150px 40px 40px; }\n  .mainWeather{ width:100%; }\n  .weatherInfo{ width:100%; margin:50px 0; padding:0 50px; }\n}\n\n@media screen and (max-width: 550px) {\n  .mainWeather > div > .iconBox > img{ width:130px; }\n  .mainWeather > div > .textBox > .temp{ font-size:50px; }\n  .weatherInfo{ width:100%; margin:30px 0; padding: 0 10px; }\n}\n</style>\n"],"sourceRoot":"src/views"}]}