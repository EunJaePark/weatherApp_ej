{"remainingRequest":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/babel-loader/lib/index.js!/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/weather_vue/weather_vue/src/views/City.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/src/views/City.vue","mtime":1588239371613},{"path":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weather_vue/weather_vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IHsgZXZlbnRidXMgfSBmcm9tICcuLi9tYWluJzsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBjaXR5bmFtZTogJycsCiAgICAgIC8vIHNpZ25hbDogZmFsc2UsCiAgICAgIG1pbnVzOiAyNzMuMTUgLy8ganNvbuuNsOydtO2EsOyXkOyEnCB0ZW1w64qUIEtlbHZpbijsoIjrjIDsmKjrj4Qp7J2066+A66GcIDI3My4xNeulvCDrubzso7zslrTslbztlZzri6QuIC8vIOy8iOu5iOydgCDsoIjrjIDsmKjrj4QoMOydhCDquLDsoITsnLzroZwg7ZWoKeyXkCDquLDrsJjsnLzroZwg7ZWY7JesIOy4oeygleuQmOuKlCDsmKjrj4TsnbTrqbAsICdLJyDsi6zrs7zsnbQg7IKs7Jqp65Cp64uI64ukLiAwSyDsnYAgLTI3My4xNSDCsEMsIO2YueydgCAtNDU5LjY3IMKwRiDroZwg67OA7ZmY65CgIOyImCDsnojsirXri4jri6QuCgogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyDqsIEg642w7J207YSwIOyEoOyWuC4KICAgIGNpdHk6IGZ1bmN0aW9uIGNpdHkoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS53ZWF0aGVyRGF0YTsKICAgIH0sCiAgICB0ZW1wSW5mbzogZnVuY3Rpb24gdGVtcEluZm8oKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS53ZWF0aGVyRGF0YS5tYWluOwogICAgfSwKICAgIHdlYXRoZXI6IGZ1bmN0aW9uIHdlYXRoZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS53ZWF0aGVyRGF0YS53ZWF0aGVyOwogICAgfSwKICAgIHN1bjogZnVuY3Rpb24gc3VuKCkgewogICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUud2VhdGhlckRhdGEuc3lzOwogICAgfSwKICAgIHdpbmQ6IGZ1bmN0aW9uIHdpbmQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS53ZWF0aGVyRGF0YS53aW5kOwogICAgfSwKICAgIC8vIOq4sOyYqDog7ISt7JSo66GcIOyImOyglSArIOyGjOyImOygkCDrsJjsmKzrprwuCiAgICB0ZW1wOiBmdW5jdGlvbiB0ZW1wKCkgewogICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLnRlbXBJbmZvLnRlbXAgLSB0aGlzLm1pbnVzKTsgLy8g7IaM7IiY7KCQIOuwmOyYrOumvC4KICAgIH0sCiAgICBtYXhUZW1wOiBmdW5jdGlvbiBtYXhUZW1wKCkgewogICAgICByZXR1cm4gTWF0aC5yb3VuZCh0aGlzLnRlbXBJbmZvLnRlbXBfbWF4IC0gdGhpcy5taW51cyk7CiAgICB9LAogICAgbWluVGVtcDogZnVuY3Rpb24gbWluVGVtcCgpIHsKICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy50ZW1wSW5mby50ZW1wX21pbiAtIHRoaXMubWludXMpOwogICAgfSwKICAgIC8v7J287LacLOydvOuqsOyLnOqwhDog7Jyg64uJ7IqkIOyLnOqwhCDtkZzspIDsi5zqsITsnLzroZwg67OA6rK9LgogICAgc3VucmlzZVRpbWU6IGZ1bmN0aW9uIHN1bnJpc2VUaW1lKCkgewogICAgICAvLyB1bml47Iuc6rCEIOuzgO2ZmC4KICAgICAgdmFyIHN1bnJpc2UgPSB0aGlzLnN1bi5zdW5yaXNlOwogICAgICBjb25zb2xlLmxvZyhzdW5yaXNlKTsKICAgICAgdmFyIHN1bnJpc2V0aW1lID0gbmV3IERhdGUoc3VucmlzZSAqIDEwMDApOwogICAgICB2YXIgc3VucmlzZVRpbWVzdHIgPSBzdW5yaXNldGltZS50b0xvY2FsZVRpbWVTdHJpbmcoc3VucmlzZXRpbWUpOwogICAgICByZXR1cm4gc3VucmlzZVRpbWVzdHI7CiAgICB9LAogICAgc3Vuc2V0VGltZTogZnVuY3Rpb24gc3Vuc2V0VGltZSgpIHsKICAgICAgLy8gdW5peOyLnOqwhCDrs4DtmZguCiAgICAgIHZhciBzdW5zZXQgPSB0aGlzLnN1bi5zdW5zZXQ7CiAgICAgIGNvbnNvbGUubG9nKHN1bnNldCk7CiAgICAgIHZhciBzdW5zZXR0aW1lID0gbmV3IERhdGUoc3Vuc2V0ICogMTAwMCk7CiAgICAgIHZhciBzdW5zZXRUaW1lc3RyID0gc3Vuc2V0dGltZS50b0xvY2FsZVRpbWVTdHJpbmcoc3Vuc2V0dGltZSk7CiAgICAgIHJldHVybiBzdW5zZXRUaW1lc3RyOwogICAgfSwKICAgIHdpbmREZWc6IGZ1bmN0aW9uIHdpbmREZWcoKSB7CiAgICAgIHZhciBjYXJkaW5hbFBvaW50cyA9IG51bGw7CgogICAgICBpZiAoMCA8PSB0aGlzLndpbmQuZGVnIDwgMTEuMjUgfHwgMzQ4Ljc1IDw9IHRoaXMud2luZC5kZWcgPCAzNjApIHsKICAgICAgICBjYXJkaW5hbFBvaW50cyA9ICfrtoEnOwogICAgICB9IGVsc2UgaWYgKDExLjI1IDw9IHRoaXMud2luZC5kZWcgPCA3OC43NSkgewogICAgICAgIGNhcmRpbmFsUG9pbnRzID0gJ+u2geuPmSc7CiAgICAgIH0gZWxzZSBpZiAoNzguNzUgPD0gdGhpcy53aW5kLmRlZyA8IDEyMy43NSkgewogICAgICAgIGNhcmRpbmFsUG9pbnRzID0gJ+uPmSc7CiAgICAgIH0gZWxzZSBpZiAoMTIzLjc1IDw9IHRoaXMud2luZC5kZWcgPCAxNDYuMjUpIHsKICAgICAgICBjYXJkaW5hbFBvaW50cyA9ICfrgqjrj5knOwogICAgICB9IGVsc2UgaWYgKDE0Ni4yNSA8PSB0aGlzLndpbmQuZGVnIDwgMTkxLjI1KSB7CiAgICAgICAgY2FyZGluYWxQb2ludHMgPSAn64KoJzsKICAgICAgfSBlbHNlIGlmICgxOTEuMjUgPD0gdGhpcy53aW5kLmRlZyA8IDIzNi4yNSkgewogICAgICAgIGNhcmRpbmFsUG9pbnRzID0gJ+uCqOyEnCc7CiAgICAgIH0gZWxzZSBpZiAoMjM2LjI1IDw9IHRoaXMud2luZC5kZWcgPCAyODEuMjUpIHsKICAgICAgICBjYXJkaW5hbFBvaW50cyA9ICfshJwnOwogICAgICB9IGVsc2UgaWYgKDI4MS4yNSA8PSB0aGlzLndpbmQuZGVnIDwgMzQ4Ljc1KSB7CiAgICAgICAgY2FyZGluYWxQb2ludHMgPSAn67aB7IScJzsKICAgICAgfQoKICAgICAgcmV0dXJuIGNhcmRpbmFsUG9pbnRzOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgLy8g7Y6Y7J207KeA7JeQIOyDiOuhreqyjCDsoJHsho3tlaAg6rK97JqwLCDsnbTsoITsl5Ag7J6F66Cl7ZW064aT7JWY642YIOuCmOudvOqwgCDrs7TsnbTrj4TroZ0g66Gc7Lus7Iqk7Yag66as7KeA7JeQ7IScIOuCmOudvOydtOumhCDqsIDsoLjsmLQuCiAgICB2YXIgbG9jYWxzdG9yYWdlQ2l0eU5hbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2l0eV9uYW1lJyk7CiAgICB0aGlzLm5ld0NpdHkobG9jYWxzdG9yYWdlQ2l0eU5hbWUpOyAvLyBTZWFyY2hDaXR5LnZ1ZeyXkOyEnCBpbnB1dOyXkCDsnoXroKXtlZwg64KY65287J2066aEIOqwgOyguOyZgOyEnCDsg4jroa3qsowg64KY652864Kg7JSoIOuNsOydtO2EsCDqsIDsoLjsmLQuCiAgICAvLyBldmVudGJ1cy4kb24oJ3NlbmRDaXR5TmFtZScsIChjaXR5SW5wdXQsIHNpZ25hbCkgPT4gewoKICAgIGV2ZW50YnVzLiRvbignc2VuZENpdHlOYW1lJywgZnVuY3Rpb24gKGNpdHlJbnB1dCkgewogICAgICBjb25zb2xlLmxvZyhjaXR5SW5wdXQpOyAvLyBjb25zb2xlLmxvZyhzaWduYWwpOyAgICAgCiAgICAgIC8vIOuCmOudvCDsnbTrpoTsnbQg66ee7J2EIOqyveyasCDrgqDslKjrjbDsnbTthLAg67O07Jes7KO86rOgLCDsnbTrpoQg7YuA66a06rK97JqwIOyVjOumvOywvSDrnKjrj4TroZ3tlZjquLAuKOyVhOyngSDrr7jsmYTshLEpIAogICAgICAvLyBpZihzaWduYWwgPT09IHRydWUpIHsKCiAgICAgIF90aGlzLm5ld0NpdHkoY2l0eUlucHV0KTsgLy8gfSAgICAKCiAgICB9KTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIGFwaeyjvOyGjOyXkCDsnoXroKXtlZwg64+E7Iuc7J2066aEIOuEo+yWtOykjC4oYXBp7J2YIGluZGV4LmpzKQogICAgbmV3Q2l0eTogZnVuY3Rpb24gbmV3Q2l0eShjaXR5bmFtZSkgewogICAgICBjb25zb2xlLmxvZygnY2l0eSBuYW1lIOuwm+yVmOyWtCEhISEhISEhIScpOwogICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnRkVUQ0hfV0VBVEhFUicsIGNpdHluYW1lKTsKICAgIH0KICB9Cn07IC8vMS4gaW5wdXTsnbQg7J6F66Cl65CY66m0IGV2ZW50QnVz66GcIOuztOuCuCBjaXR566qF7J2EIOuwm+yVhOyYqOuSpAovLzIuIGNpdHnrqoXsnYQg642w7J207YSw7JeQIOyggOyepe2VtOyjvOqzoCwKLy8zLiDsnbQg6rO87KCV7J2EIOqxsOy5nCDtm4Tsl5Agc3RvcmXroZwg7Iuc7Yuw66qF7J2EIOuztOuCtOykmOyVvO2VqC4KLy8g7Jio64+ELCDrgqDslKjsoJXrs7QsIOuPhOyLnOuqhSwg64Kg7KecIOy2nOugpS4="},{"version":3,"sources":["City.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div \n    class=\"city\"\n    \n  ><!-- @cityname = \"newCity\" -->\n    <p>나라이름: <span>{{ city.name }}</span></p>\n\n    <div v-if=\"tempInfo\">\n      <p>평균 기온: <span>{{ temp }} ℃</span></p>\n      <p>최고 기온: <span>{{ maxTemp }} ℃</span></p>\n      <p>최저 기온: <span>{{ minTemp  }} ℃</span></p>     \n      <p>습도: <span>{{ tempInfo.humidity }} %</span></p>     \n    </div>\n\n    <div v-if=\"weather\" >\n      <p>날씨: <span v-for=\"item in weather\">{{ item.main }}.  </span></p>\n      <img v-bind:src=\"`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`\" />\n    </div>\n\n    <div v-if=\"wind\">\n      <p>바람: <span>{{ windDeg }}풍({{ wind.deg }}) {{ wind.speed }}m/s</span></p>\n    </div>\n\n    <div v-if=\"sun\">\n      <p>일출: <span>{{ sunriseTime }}</span></p>\n      <p>일몰: <span>{{ sunsetTime }}</span></p>\n    </div>\n\n    \n    <div style=\"outline:2px solid gray;  padding:20px;\">\n      <p>날씨 전체 데이터</p>\n      {{ city }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { eventbus } from '../main'\nexport default {\n  data() {\n    return {\n      cityname: '',\n      // signal: false,\n      minus: 273.15  // json데이터에서 temp는 Kelvin(절대온도)이므로 273.15를 빼주어야한다. // 켈빈은 절대온도(0을 기전으로 함)에 기반으로 하여 측정되는 온도이며, 'K' 심볼이 사용됩니다. 0K 은 -273.15 °C, 혹은 -459.67 °F 로 변환될 수 있습니다.\n    }\n  },\n  computed: {\n    // 각 데이터 선언.\n    city () {\n      return this.$store.state.weatherData\n    },\n    tempInfo() {\n      return this.$store.state.weatherData.main\n    },\n    weather() {\n      return this.$store.state.weatherData.weather\n    },\n    sun() {\n      return this.$store.state.weatherData.sys\n    },\n    wind() {\n      return this.$store.state.weatherData.wind\n    },\n\n    // 기온: 섭씨로 수정 + 소수점 반올림.\n    temp() {\n      return Math.round(this.tempInfo.temp - this.minus)  // 소수점 반올림.\n    },\n    maxTemp() {\n      return Math.round(this.tempInfo.temp_max - this.minus)\n    },\n    minTemp() {\n      return Math.round(this.tempInfo.temp_min - this.minus)\n    },\n    \n    //일출,일몰시간: 유닉스 시간 표준시간으로 변경.\n    sunriseTime() {\n      // unix시간 변환.\n      const sunrise = this.sun.sunrise\n      console.log(sunrise);\n      const sunrisetime = new Date(sunrise * 1000)\n      const sunriseTimestr = sunrisetime.toLocaleTimeString(sunrisetime)\n      return sunriseTimestr;\n    },\n    sunsetTime() {\n      // unix시간 변환.\n      const sunset = this.sun.sunset\n      console.log(sunset);\n      const sunsettime = new Date(sunset * 1000)\n      const sunsetTimestr = sunsettime.toLocaleTimeString(sunsettime)\n      return sunsetTimestr;\n    },\n    windDeg() {\n      let cardinalPoints = null\n      if(0 <= this.wind.deg < 11.25 || 348.75 <= this.wind.deg < 360) { cardinalPoints = '북' }\n      else if(11.25 <= this.wind.deg < 78.75)  { cardinalPoints = '북동' }\n      else if(78.75 <= this.wind.deg < 123.75)  { cardinalPoints = '동' }\n      else if(123.75 <= this.wind.deg < 146.25)  { cardinalPoints = '남동' }\n      else if(146.25 <= this.wind.deg < 191.25)  { cardinalPoints = '남' }\n      else if(191.25 <= this.wind.deg < 236.25)  { cardinalPoints = '남서' }\n      else if(236.25 <= this.wind.deg < 281.25)  { cardinalPoints = '서' }\n      else if(281.25 <= this.wind.deg < 348.75)  { cardinalPoints = '북서' }\n\n      return cardinalPoints\n    }\n  },\n  created() {  \n    // 페이지에 새롭게 접속할 경우, 이전에 입력해놓았던 나라가 보이도록 로컬스토리지에서 나라이름 가져옴.\n    const localstorageCityName = localStorage.getItem('city_name');  \n    this.newCity(localstorageCityName)\n\n\n    // SearchCity.vue에서 input에 입력한 나라이름 가져와서 새롭게 나라날씨 데이터 가져옴.\n    // eventbus.$on('sendCityName', (cityInput, signal) => {\n    eventbus.$on('sendCityName', (cityInput) => {\n      console.log(cityInput)\n      // console.log(signal);     \n\n      // 나라 이름이 맞을 경우 날씨데이터 보여주고, 이름 틀릴경우 알림창 뜨도록하기.(아직 미완성) \n      // if(signal === true) {\n        this.newCity(cityInput)\n      // }    \n      \n    }) \n    \n\n    \n        \n  },\n  methods: {\n    // api주소에 입력한 도시이름 넣어줌.(api의 index.js)\n    newCity(cityname) {\n      console.log('city name 받았어!!!!!!!!!');\n      this.$store.dispatch('FETCH_WEATHER', cityname)     \n    },\n  }\n}\n\n\n    //1. input이 입력되면 eventBus로 보낸 city명을 받아온뒤\n    //2. city명을 데이터에 저장해주고,\n    //3. 이 과정을 거친 후에 store로 시티명을 보내줘야함.\n    // 온도, 날씨정보, 도시명, 날짜 출력.\n</script>\n\n<style>\n.city{ outline:3px solid orange; margin-top:30px; padding:40px; }\nspan{ font-size:25px; font-weight:bold; }\n</style>\n"],"sourceRoot":"src/views"}]}