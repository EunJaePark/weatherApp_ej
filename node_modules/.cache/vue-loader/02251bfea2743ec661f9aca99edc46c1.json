{"remainingRequest":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/eunjae/Desktop/github/weatherApp_ej/src/views/City.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/src/views/City.vue","mtime":1601047236119},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/eunjae/Desktop/github/weatherApp_ej/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["City.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA","file":"City.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div \n    class=\"city clear\"\n    :class=\"[\n      {\n        'thunderstorm-light': weatherStatus === 'thunderstorm' && this.day === true,\n        'drizzle-light': weatherStatus === 'drizzle' && this.day === true,\n        'rain-light': weatherStatus === 'rain' && this.day === true,\n        'snow-light': weatherStatus === 'snow' && this.day === true,\n        'atmosphere-light': weatherStatus === 'atmosphere' && this.day === true,\n        'clouds-light': weatherStatus === 'clouds' && this.day === true,\n        'clean-light': weatherStatus === 'clean' && this.day === true,\n        'thunderstorm-dark': weatherStatus === 'thunderstorm' && this.night === true,\n        'drizzle-dark': weatherStatus === 'drizzle' && this.night === true,\n        'rain-dark': weatherStatus === 'rain' && this.night === true,\n        'snow-dark': weatherStatus === 'snow' && this.night === true,\n        'atmosphere-dark': weatherStatus === 'atmosphere' && this.night === true,\n        'clouds-dark': weatherStatus === 'clouds' && this.night === true,\n        'clean-dark': weatherStatus === 'clean' && this.night === true,\n      },\n      {       \n        'font-white': this.night === true || weatherStatus === 'rain' , \n        'font-black': this.day === true && weatherStatus !== 'rain'\n      }\n    ]\"\n  ><!-- @cityname = \"newCity\" v-bind=\"weatherBG\"-->\n  <!-- <div \n    class=\"dayBackgroundcolor\"\n    :class=\"{\n      light: this.day === true, \n      dark: this.night === true\n    }\"\n  >{{ this.day }} {{ this.night }}</div> -->\n    <div class=\"mainWeather\">\n      <h1 class=\"cityname\">\n        <i class=\"fas fa-map-marker-alt\"></i>\n        <span>{{ city.name }}</span>\n      </h1>\n      <!-- <span class=\"date\">{{ today() }} / {{ city.timezone }}</span>\n      <span class=\"date\">{{ new Date() }}</span> -->\n      <!-- <span class=\"date\">{{ moment.tz(\"2019-11-12 15:00\" , \"Asia/Seoul\") }}</span> -->\n\n      <div v-if=\"weather\" class=\"clear\">\n        <h3 class=\"transparent\">배경에 적용되어야 할 날씨id(없애면 안됨 이 h3태그) : ***** {{weatherBG(weather[0].id) }} *****</h3>\n        <div class=\"iconBox\">\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`\" />\n        </div>\n        <div class=\"textBox\">\n         <span class=\"temp\">{{ temp }}℃</span> <!--평균기온-->\n          <span v-for=\"item in weather\" :key=\"item.id\" class=\"weatherText\">{{ item.main }}.</span> <!--날씨-->\n        </div>\n      </div>\n    </div><!--.mainWeather-->\n\n    <div class=\"weatherInfo\">\n      <div v-if=\"tempInfo\">\n        <span>{{ maxTemp }}℃<span>Heigh</span></span> <!--최고 기온-->\n        <span>{{ minTemp  }}℃<span>Low</span></span>  <!--최저 기온-->    \n        <span>{{ tempInfo.humidity }}%<span>Humidity</span></span> <!--습도-->     \n      </div>\n\n      <div v-if=\"wind\">\n        <span>{{ wind.speed }}m/s<span>Wind</span></span> <!--바람-->\n        <!-- <span>{{ windDeg }}풍({{ wind.deg }}) {{ wind.speed }}m/s<span>Wind</span></span> -->\n      </div>\n\n      <div v-if=\"sun\">\n        <span>{{ sunriseTime }}<span>Sunrise</span></span> <!--일출-->\n        <span>{{ sunsetTime }}<span>Sunset</span></span> <!--일몰-->\n      </div>\n    </div><!--.weatherInfo-->\n\n    <h2>Forecast</h2>\n    <div class=\"weather5dayInfo\">      \n      <ul>\n        <li v-for=\"item in date5days\" :key=\"item.index\">\n          <span>{{ `${new Date(item.dt * 1000).getMonth() + 1 < 10 ? `0${new Date(item.dt * 1000).getMonth() + 1}` : `${new Date(item.dt * 1000).getMonth() + 1}`}.${new Date(item.dt * 1000).getDate() < 10 ? `0${new Date(item.dt * 1000).getDate()}` : `${new Date(item.dt * 1000).getDate()}`}` }} </span>\n          <span>{{ `${new Date(item.dt * 1000).getHours()}:${new Date(item.dt * 1000).getMinutes()}0` }} </span>\n          <!-- <span>{{ item.weather[0].main }}</span> -->\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`\" />\n          <span>{{ Math.round(item.main.temp) }}℃</span>\n        </li>\n      </ul>\n    </div><!--.weather5dayInfo-->\n\n    <!-- <div style=\"outline:2px solid gray;  padding:20px;\">\n      <p>날씨 전체 데이터</p>\n      {{ city }}\n    </div> -->\n  </div><!--.city-->\n</template>\n\n<script>\nimport { eventbus } from '../main'\nexport default {\n  data() {\n    return {\n      cityname: '',\n      // signal: false,\n      minus: 273.15,  // json데이터에서 temp는 Kelvin(절대온도)이므로 273.15를 빼주어야한다. // 켈빈은 절대온도(0을 기전으로 함)에 기반으로 하여 측정되는 온도이며, 'K' 심볼이 사용됩니다. 0K 은 -273.15 °C, 혹은 -459.67 °F 로 변환될 수 있습니다.\n      weatherId: '',\n      day: false,\n      night: false,\n      weatherStatus: '',\n    }\n  },\n  computed: {\n    // 각 데이터 선언.\n    city () {\n      console.log(this.$store.state.weatherData);     \n      return this.$store.state.weatherData\n    },\n    tempInfo() {\n      return this.$store.state.weatherData.main\n    },\n    weather() {\n      return this.$store.state.weatherData.weather\n    },\n    sun() {\n      return this.$store.state.weatherData.sys\n    },\n    wind() {\n      return this.$store.state.weatherData.wind\n    },\n\n    // 기온: 섭씨로 수정 + 소수점 반올림.\n    temp() {\n      return Math.round(this.tempInfo.temp - this.minus)  // 소수점 반올림.\n    },\n    maxTemp() {\n      return Math.round(this.tempInfo.temp_max - this.minus)\n    },\n    minTemp() {\n      return Math.round(this.tempInfo.temp_min - this.minus)\n    },\n    //일출,일몰시간: 유닉스 시간을 표준시간으로 변경.\n    sunriseTime() {\n      // unix시간 변환.\n      const sunrise = this.sun.sunrise\n      localStorage.setItem('sunrise', sunrise)\n      console.log(`일출시간 : ${sunrise}`);\n      const sunrisetime = new Date(sunrise * 1000)\n      console.log(`일출시간 : ${sunrisetime}`);\n      const sunriseTimestr = `${(sunrisetime.getHours() % 12) < 10 ? `0${sunrisetime.getHours() % 12}` : `${sunrisetime.getHours() % 12}`}:${sunrisetime.getMinutes() < 10 ? `0${sunrisetime.getMinutes()}` : `${sunrisetime.getMinutes()}`}`\n      console.log(`일출시간 : ${sunriseTimestr}`);\n\n      // 일출/일몰 시간 이용해서 배경 밝기 조절하는 함수 실행시켜주기.\n      this.sunBG();\n\n      return sunriseTimestr;\n    },\n    sunsetTime() {\n      // unix시간 변환.\n      const sunset = this.sun.sunset\n      localStorage.setItem('sunset', sunset)\n      console.log(`일몰시간 : ${sunset}`);\n      const sunsettime = new Date(sunset * 1000)\n      const sunsetTimestr = `${(sunsettime.getHours() % 12) < 10 ? `0${sunsettime.getHours() % 12}` : `${sunsettime.getHours() % 12}`}:${sunsettime.getMinutes() < 10 ? `0${sunsettime.getMinutes()}` : `${sunsettime.getMinutes()}`}`\n      return sunsetTimestr;\n    },\n\n    // // 일출, 일몰 시간에 따른 배경 밝기 조절.\n    // sunBG() {\n    //   const riseTime = this.sun.sunrise\n    //   const setTime = this.sun.sunset\n    //   console.log(riseTime, setTime, '아 왜 안되냐***********');\n      \n    //   this.sunbg(riseTime, setTime)\n      \n    //   return sunbe(riseTime, setTime)\n    // },\n\n    // // 풍향: 방위 각도를 한글로 수정.\n    // windDeg() {\n    //   let cardinalPoints = null\n    //   if(0 <= this.wind.deg < 11.25 || 348.75 <= this.wind.deg < 360) { cardinalPoints = '북' }\n    //   else if(11.25 <= this.wind.deg < 78.75)  { cardinalPoints = '북동' }\n    //   else if(78.75 <= this.wind.deg < 123.75)  { cardinalPoints = '동' }\n    //   else if(123.75 <= this.wind.deg < 146.25)  { cardinalPoints = '남동' }\n    //   else if(146.25 <= this.wind.deg < 191.25)  { cardinalPoints = '남' }\n    //   else if(191.25 <= this.wind.deg < 236.25)  { cardinalPoints = '남서' }\n    //   else if(236.25 <= this.wind.deg < 281.25)  { cardinalPoints = '서' }\n    //   else if(281.25 <= this.wind.deg < 348.75)  { cardinalPoints = '북서' }\n\n    //   return cardinalPoints\n    // },\n\n    // 5days 시간별 날씨 전체 데이터.\n    weather5days() {\n      return this.$store.state.weather5daysData\n    },\n    // 5days 날짜 + 기온 + icon(id).\n    date5days() {\n      return this.weather5days.list\n    }\n\n  },\n  created() {  \n    // 페이지에 새롭게 접속할 경우, 이전에 입력해놓았던 나라가 보이도록 로컬스토리지에서 나라이름 가져옴.\n    const localstorageCityName = localStorage.getItem('city_name')\n    this.newCity(localstorageCityName)\n\n    // 페이지 새로고침시 weather에 따른 배경색 주기위함.\n    console.log(localStorage.getItem('weatherID'));\n    const weatherID = localStorage.getItem('weatherID')\n    // console.log(weatherID)\n    this.weatherBg(weatherID)\n\n    // 페이지 새로고침시 일출, 일몰에 따른 배경 밝기 조절.\n    const sunriseTime = localStorage.getItem('sunrise')\n    const sunsetTime = localStorage.getItem('sunset')\n    console.log(sunriseTime, sunsetTime);\n    \n    this.sunbg(sunriseTime, sunsetTime)\n\n\n    // SearchCity.vue에서 input에 입력한 나라이름 가져와서 새롭게 나라날씨 데이터 가져옴.\n    eventbus.$on('sendCityName', (cityInput) => {\n      console.log(cityInput)\n\n      if(cityInput) {\n        this.newCity(cityInput)\n        let weatherid = null\n        console.log(weatherid);\n        console.log(this.$store.state.weatherData);\n        console.log(this.weatherBg);\n        \n        this.weatherBg(weatherid)\n      }\n      \n    })   \n  },\n  methods: {\n    // api주소에 입력한 도시이름 넣어줌.(api의 index.js)\n    newCity(cityname) {\n      console.log('city name 받았어!!!!!!!!!');\n      this.$store.dispatch('FETCH_WEATHER', cityname)    \n      this.$store.dispatch('FETCH_5DAYS', cityname) \n    },\n\n    // 날씨에 따른 배경 체인지.\n    weatherBG(weatherID) {  \n      localStorage.setItem('weatherID', weatherID); \n      this.weatherId = weatherID;\n      console.log(`this.weatherId: ${this.weatherId}`);\n\n      this.weatherBg(this.weatherId); \n      console.log(this.weatherId);\n      \n      return weatherID;    \n    },\n    weatherBg(id) {\n      console.log(id); //console에 null로 뜨네...?\n      // id = this.weather[0].id\n      console.log(`이걸로 날씨id가 적용되는건데.....!화면에 뜬 숫자랑 같은가.....${id}`);\n      // console.log(this);\n      \n      if(id < 300) {\n        console.log('Thunderstorm');    \n        localStorage.setItem('weather', 'thunderstorm');\n        this.weatherStatus = 'thunderstorm';     \n        // document.querySelector('.city').classList.add('thunderstorm')   \n      } else if(id < 400) {\n        console.log('Drizzle');   \n        localStorage.setItem('weather', 'drizzle');\n        this.weatherStatus = 'drizzle';  \n        // document.querySelector('.city').classList.add('drizzle') \n      } else if(id < 600) {\n        console.log('이건Rain');   \n        localStorage.setItem('weather', 'rain');  \n        this.weatherStatus = 'rain';      \n        // document.querySelector('.city').classList.add('rain')           \n      } else if(id < 700) {\n        console.log('Snow');\n        localStorage.setItem('weather', 'snow'); \n        this.weatherStatus = 'snow';\n        // document.querySelector('.city').classList.add('snow')    \n      } else if(id < 800) {\n        console.log('Atmosphere');  \n        localStorage.setItem('weather', 'atmosphere');  \n        this.weatherStatus = 'atmosphere';\n        // document.querySelector('.city').classList.add('atmosphere')         \n      } else if(id >= 801) {\n        console.log('Clouds')  \n        localStorage.setItem('weather', 'clouds');    \n        this.weatherStatus = 'clouds';\n        console.log(this.weatherStatus);\n        // document.querySelector('.city').classList.add('clouds')     \n      } else if(id = 800) {\n        console.log('Clean'); \n        localStorage.setItem('weather', 'clean');  \n        this.weatherStatus = 'clean';\n        // document.querySelector('.city').classList.add('clean')  \n      }\n    },\n\n    // 일출, 일몰 시간에 따른 배경 밝기 조절.\n    sunBG() {\n      const riseTime = this.sun.sunrise\n      const setTime = this.sun.sunset\n      console.log(riseTime, setTime, '아 왜 안되냐*********** 된다!!!!');\n      \n      this.sunbg(riseTime, setTime)\n    },\n    sunbg(sunriseTime, sunsetTime) {\n      console.log('일출일몰시간 따라서 배경밝기 조절 함수 실행됨.');\n\n      const timeNow = new Date().getTime() / 1000\n      console.log(`현재시간 : ${timeNow} 일출:${sunriseTime} 일몰:${sunsetTime}`);\n      // console.log(`현재시간 : ${timeNow} 일출:${this.sun.sunrise} 일몰:${this.sun.sunset}`);\n\n      if(sunriseTime, sunsetTime) {\n        if(timeNow < sunriseTime ) {\n          console.log('동트기 전!!!!!!!!!!');\n        \n          this.day = false\n          this.night = true\n        }\n        if(sunriseTime < timeNow < sunsetTime && !(timeNow < sunriseTime)) {  // timeNow < sunriseTime가 계속 일출 후랑 겹쳐서 적용되서, 조건을 하나 더 줌.\n          console.log('해 뜸!!!!!!!!!');\n          this.night = false\n          this.day = true\n        } \n        if( sunsetTime <= timeNow) {\n          console.log('해 짐!!!!!!!!!!!');   \n          this.day = false\n          this.night = true\n        }\n\n        console.log(`day= ${this.day}`);\n        console.log(`night= ${this.night}`);\n      }\n    },\n    today() {\n      return new Date().valueOf();\n    },\n  }\n}\n\n\n    //1. input이 입력되면 eventBus로 보낸 city명을 받아온뒤\n    //2. city명을 데이터에 저장해주고,\n    //3. 이 과정을 거친 후에 store로 시티명을 보내줘야함.\n    // 온도, 날씨정보, 도시명, 날짜 출력.\n</script>\n\n<style>\n.clear:after{ content:''; display:block; clear:both; }\n.transparent{ opacity: 0; display: none; }\n/* .light, .dark의 height를 넓이가 변할때마다 바꿔줘야함.!! */\n.light{ border:3px solid yellow; content:''; display:block; width:100vw; min-height:100vh; background-color:rgba(255, 255, 255, .5); /*position:fixed; top:0; left:0;*/ }\n.dark{ border:3px solid blue; content:''; display:block; width:100vw; min-height:100vh; background-color:rgba(0, 0, 0, .5); background-blend-mode: multiply; /*position:fixed; top:0; left:0;*/ }\n.font-white{ color: #fff; }\n.font-black{ color: #353434; }\n/* --- light ver. --- */\n.thunderstorm-light{ background:url('../assets/imgs/thunderstorm.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.drizzle-light{ background:url('../assets/imgs/drizzle.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.rain-light{ background:url('../assets/imgs/rain.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.snow-light{ background:url('../assets/imgs/snow.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.atmosphere-light{ background:url('../assets/imgs/atmosphere.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.clean-light{ background:url('../assets/imgs/clean.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n.clouds-light{ background:url('../assets/imgs/clouds.png') no-repeat center center; background-size: cover; background-color:rgba(255, 255, 255, 1); background-blend-mode: multiply; }\n/* --- dark ver. --- */\n.thunderstorm-dark{ background:url('../assets/imgs/thunderstorm.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.drizzle-dark{ background:url('../assets/imgs/drizzle.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.rain-dark{ background:url('../assets/imgs/rain.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.snow-dark{ background:url('../assets/imgs/snow.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.atmosphere-dark{ background:url('../assets/imgs/atmosphere.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.clean-dark{ background:url('../assets/imgs/clean.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n.clouds-dark{ background:url('../assets/imgs/clouds.png') no-repeat center center; background-size: cover; background-color:rgba(0, 0, 0, .7); background-blend-mode: multiply; }\n\n\n.city{ outline:0px solid orange; min-height:100vh; padding:250px 100px 40px;  }\n.dayBackgroundcolor{ width: 100vw; height: 100vh; position: fixed; top: 0; left: 0;  }\n\n.mainWeather{ outline:0px solid red; width:50%; float:left; z-index: 100; }\n.mainWeather > .cityname > i{  margin-right: 20px; font-size: 40px; display:inline-block; }\n.mainWeather > .cityname > span{ font-size:45px; font-weight:bold; }\n.mainWeather > .date{ margin:10px 0 50px; font-size:20px; display:block; }\n.mainWeather > div{  height:200px; margin-top: 40px; }\n.mainWeather > div > .iconBox{ outline:0px solid lime; width:50%; padding-top:10px; float:left; }\n.mainWeather > div > .iconBox > img{ outline:0px solid lime; width:180px; margin:0 0 0 auto; display:block; }\n.mainWeather > div > .textBox{ outline:0px solid blue; width:50%; height:100%; padding:40px 0; float:left; }\n.mainWeather > div > .textBox > .temp{ outline:0px solid blue; font-size:70px;  }\n.mainWeather > div > .textBox > .weatherText{ outline:0px solid blueviolet; margin-left:10px; font-size:20px; display:block;  }\n\n.weatherInfo{ border-radius:10px;  width:calc(50% + -20px);  margin:100px 0 0 20px; background-color:rgba(255, 255, 255, .2); float:left;  }\n.weatherInfo span{ width:33.3%; height:100px; padding:26px 0; font-size:20px; text-align:center; float:left; position:relative; } /* 날씨정보 */\n.weatherInfo span > span{  width:100%; height:auto; padding:0; font-size:15px; position:absolute; bottom:26px; left:0; }  /* 날씨정보 타이틀 */\n\n/* <div class=\"weather5dayInfo\">\n      <ul>\n        <li v-for=\"item in date5days\">\n          <span>{{ `${new Date(item.dt * 1000).getMonth() + 1}.${new Date(item.dt * 1000).getDate()}` }} </span>\n          <span>{{ `${new Date(item.dt * 1000).getHours()}:${new Date(item.dt * 1000).getMinutes()}0` }} </span>\n          <span>{{ Math.round(item.main.temp) }}</span>\n          <span>{{ item.weather[0].main }}</span>\n          <img v-bind:src=\"`http://openweathermap.org/img/wn/${item.weather[0].icon}@2x.png`\" />\n        </li>\n      </ul>\n    </div><!--.weather5dayInfo--> */\n\nh2{ width:100%; margin:80px 0 15px; font-weight:400; font-size:25px; text-align:left; display:inline-block; }\n.weather5dayInfo{  width:100%; overflow:scroll; }\n.weather5dayInfo > ul{width:4400px;  }\n.weather5dayInfo > ul:after{ content:''; display:block; clear:both; }\n.weather5dayInfo > ul > li{ border-radius:5px; width:90px; padding:10px; list-style:none; background-color:rgba(255, 255, 255, .2); float:left; }\n.weather5dayInfo > ul > li + li{ margin-left:20px; }\n\n.weather5dayInfo > ul > li > span{ text-align:center; display:block; }\n.weather5dayInfo > ul > li > img{ width:70%; margin:0 auto; display:block; }\n\n@media screen and (max-width: 900px) {\n  .city{ padding:180px 40px 40px; }\n  .mainWeather{ width:100%; }\n  .weatherInfo{ width:100%; margin:50px 0; padding:0 50px; }\n}\n\n@media screen and (max-width: 550px) {\n  .mainWeather > div > .iconBox > img{ width:130px; }\n  .mainWeather > div > .textBox > .temp{ font-size:50px; }\n  .weatherInfo{ width:100%; margin:30px 0; padding: 0 10px; }\n  h2{ margin:30px 0 15px; }\n}\n</style>\n"]}]}